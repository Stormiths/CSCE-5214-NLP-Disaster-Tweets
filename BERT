{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bac4c03-bb30-4db4-b4f8-0ad327836a67",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Install necessary libraries\n",
    "!pip install transformers torch scikit-learn pandas\n",
    "!pip install transformers[torch] accelerate\n",
    "import re\n",
    "import pandas as pd\n",
    "import torch\n",
    "from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "346a8afc-8b82-4bcc-8e9a-0529d4c5a967",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uploading dataset\n",
    "train_df = pd.read_csv('train.csv')\n",
    "test_df = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97f98642-e113-446b-b763-596a5b62e501",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preprocessing: Cleaning the text data\n",
    "def preprocess_text(text):\n",
    "    # Removing URLs, mentions, hashtags, and special characters using the `re` module\n",
    "    text = re.sub(r\"http\\S+|www\\S+|https\\S+\", '', text)  # Removing URLs\n",
    "    text = re.sub(r\"@\\w+\", '', text)  # Removing mentions\n",
    "    text = re.sub(r\"#\", '', text)  # Removing hashtags\n",
    "    text = re.sub(r\"[^A-Za-z0-9 ]+\", '', text)  # Removing special characters\n",
    "    text = text.lower()  # Lowercasing for consistency\n",
    "    return text\n",
    "train_df['text'] = train_df['text'].apply(preprocess_text)\n",
    "test_df['text'] = test_df['text'].apply(preprocess_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "227e9b67-8e48-4f73-a11e-1c6fc7fb162e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the data into train and validation sets\n",
    "train_texts, val_texts, train_labels, val_labels = train_test_split(\n",
    "    train_df['text'], train_df['target'], test_size=0.2, random_state=42\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a49a87f-93f7-4e12-8bf4-eec1c9ac15b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Tokenization using BERT tokenizer\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "\n",
    "train_encodings = tokenizer(list(train_texts), truncation=True, padding=True, max_length=128)\n",
    "val_encodings = tokenizer(list(val_texts), truncation=True, padding=True, max_length=128)\n",
    "test_encodings = tokenizer(list(test_df['text']), truncation=True, padding=True, max_length=128)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c27c449d-65b8-4b9e-af76-3edb49045ca0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a Dataset Class for PyTorch\n",
    "class DisasterTweetsDataset(torch.utils.data.Dataset):\n",
    "    def __init__(self, encodings, labels=None):\n",
    "        self.encodings = encodings\n",
    "        self.labels = labels\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}\n",
    "        if self.labels is not None:\n",
    "            item['labels'] = torch.tensor(self.labels[idx])\n",
    "        return item\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.labels) if self.labels is not None else len(self.encodings['input_ids'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60aa7b35-b737-4e4b-bef6-e2f303a02127",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating Dataset Objects\n",
    "train_dataset = DisasterTweetsDataset(train_encodings, list(train_labels))\n",
    "val_dataset = DisasterTweetsDataset(val_encodings, list(val_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10237eb9-9b12-4151-a91b-82d8aaa6a394",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Loading Pre-trained BERT Model for Sequence Classification\n",
    "model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2b97a56-da45-41e7-af90-743d95990704",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Setting up Training Arguments\n",
    "training_args = TrainingArguments(\n",
    "    output_dir='./results',  # Directory to store results\n",
    "    num_train_epochs=3,      # Number of epochs\n",
    "    per_device_train_batch_size=8,  # Batch size for training\n",
    "    per_device_eval_batch_size=16,  # Batch size for evaluation\n",
    "    warmup_steps=500,        # Number of warmup steps for learning rate scheduler\n",
    "    weight_decay=0.01,       # Strength of weight decay\n",
    "    logging_dir='./logs',    # Directory to store logs\n",
    "    logging_steps=10,        # Log every 10 steps\n",
    "    evaluation_strategy=\"epoch\"  # Evaluate every epoch\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34a5b8e9-7449-437a-9405-3bd20bf78e4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# S Defining  Metrics \n",
    "def compute_metrics(pred):\n",
    "    labels = pred.label_ids\n",
    "    preds = pred.predictions.argmax(-1)\n",
    "    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='binary')\n",
    "    acc = accuracy_score(labels, preds)\n",
    "    return {\n",
    "        'accuracy': acc,\n",
    "        'f1': f1,\n",
    "        'precision': precision,\n",
    "        'recall': recall\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b07c883d-bdf2-44d6-a3ac-6dabfc6c5f6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Initializing Trainer Model\n",
    "trainer = Trainer(\n",
    "    model=model,\n",
    "    args=training_args,\n",
    "    train_dataset=train_dataset,\n",
    "    eval_dataset=val_dataset,\n",
    "    compute_metrics=compute_metrics\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa088ffb-4675-43ce-87dd-33cf2803a97f",
   "metadata": {},
   "outputs": [],
   "source": [
    "trainer.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc12c930-c1db-4ee5-8946-a447d56b06fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluate Model\n",
    "eval_results = trainer.evaluate()\n",
    "print(f\"Evaluation results: {eval_results}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd00b888-a414-4b6d-97ed-269707bbe5a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predicting on Test Data\n",
    "test_dataset = DisasterTweetsDataset(test_encodings)\n",
    "predictions = trainer.predict(test_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "447e5449-4016-4cec-b630-b7d0aa2f34bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extracting Predictions\n",
    "preds = predictions.predictions.argmax(-1)\n",
    "test_df['prediction'] = preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb411ef5-8a38-4d87-9cfb-bbf96fc5b75a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Save predictions to CSV\n",
    "test_df[['id', 'prediction']].to_csv('test_predictions.csv', index=False)\n",
    "\n",
    "print(\"Predictions saved to 'test_predictions.csv'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35a48a8d-8ac8-44df-92bb-a4f94afae3d6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
